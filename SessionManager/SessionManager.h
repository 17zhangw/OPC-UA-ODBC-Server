/* 
 * Copyright (C) 2017 iData Inc. - All Rights Reserved
 * Developed by William Zhang
 */

#ifndef SESSIONMANAGER_H
#define SESSIONMANAGER_H

#include "../Definitions/id_opcua.h"

#ifdef __cplusplus 
extern "C" {
#endif
    
    typedef struct _ID_StoredStatement_ {
        OpcUa_UInt32 Identifier;    // client handle
        HSTMT Statement;            // statement handle
        
        OpcUa_Int NumBuffers;       // numBuffers used
        void ** Buffers;            // Pointers to buffers
        SQLLEN * BufferLengths;     // Lengths of each buffer
        SQLLEN ** InputIndicators;  // Pointers to input indicators on Bind
    } ID_PreparedStatement;
    
    typedef struct _ID_Session_ {
        OpcUa_Boolean IsBeingMutated;           // serves as an internal mutex without OpcUa_Mutex to prevent thread-lock
        OpcUa_UInt32 SecureChannelId;           // SecureChannelId of channel
        OpcUa_NodeId SessionId;                 // SessionId generated by server
        OpcUa_NodeId AuthenticationToken;       // AuthenticationToken of Client
        OpcUa_String SessionName;               // SessionName
        OpcUa_String ProductUri;                // Client ProductUri
        OpcUa_LocalizedText ApplicationName;    // ApplicationName of Client
        OpcUa_ByteString ClientNonce;           // client nonce
        OpcUa_ByteString ClientCertificate;     // client certificate
        OpcUa_ByteString ServerNonce;           // server nonce
        OpcUa_ExtensionObject IdentityToken;    // identity token
        
        OpcUa_UInt32 MaxResponseMessageSize;    // max response
        OpcUa_Double SessionTimeout;            // timeout
        OpcUa_Double IdledTime;                 // idled time
        OpcUa_Boolean IsActivated;              // is session activated
        
        OpcUa_Boolean IsConnected;              // db connections tatus
        HENV SessionDBEnvHandle;                // env handle
        HDBC SessionDBConnHandle;               // db handle
        
        OpcUa_UInt32 NumPreparedStatements; 
        ID_PreparedStatement ** PreparedStatements; // prepared statements
        OpcUa_Mutex PreparedStatementsMutex; // mutex for prepared statements
    } ID_Session;
    
    typedef void * ID_SessionManagerHandle;
    
    // Frees the content of a PreparedStatement but not he handle itself
    void ID_PreparedStatement_Free(ID_PreparedStatement * PStmt);
    
    // Create SessionManager
    void ID_SessionManager_Create(ID_SessionManagerHandle * Handle);

    // Checks if a given session is valid
    OpcUa_Boolean ID_SessionManager_IsSessionValid(ID_SessionManagerHandle Handle, OpcUa_NodeId * AuthenticationToken, OpcUa_Endpoint hEndpoint, OpcUa_Handle hContext, OpcUa_Boolean Override);
    
    // Get Session with AuthenticationToken
    ID_Session * ID_SessionManager_GetSession(ID_SessionManagerHandle Handle, OpcUa_NodeId * AuthenticationToken);

    // Adds a Session to the server
    ID_Session * ID_SessionManager_AddSession(ID_SessionManagerHandle Handle, OpcUa_UInt32 SecureChannelId, OpcUa_String * SessionName, OpcUa_ApplicationDescription * ClientDescription, OpcUa_ByteString * ClientNonce, OpcUa_ByteString * ClientCertificate);
    
    // Validates lifetime of sessions
    void ID_SessionManager_ValidateSessionLifetime(ID_SessionManagerHandle Handle, OpcUa_UInt32 ElapsedCount);
    
    // Remove session with authentication token
    void ID_SessionManager_RemoveSession(ID_SessionManagerHandle Handle, OpcUa_NodeId * AuthenticationToken);
    
    // Destroys SessionMaanger
    void ID_SessionManager_Destroy(ID_SessionManagerHandle * Handle);
    
    // Link SecureChannelId with a given certificate
    void ID_SessionManager_AssociateSecureChannelIdWithCertificate(ID_SessionManagerHandle Handle, OpcUa_UInt32 SecureChannelId, OpcUa_ByteString * Certificate);
    
    // Retrieve Certificate associated with a given Id
    OpcUa_ByteString * ID_SessionManager_GetCertificateAssociatedWithId(ID_SessionManagerHandle Handle, OpcUa_UInt32 SecureChannelId);
    
    // Unassociate certificate and secure channel id
    void ID_SessionManager_UnassociateSecureChannelId(ID_SessionManagerHandle Handle, OpcUa_UInt32 SecureChannelId);
    
#ifdef __cplusplus
}
#endif

#endif /* SESSIONMANAGER_H */
